version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: team-planner-db
    restart: unless-stopped
    ports:
      - "0.0.0.0:27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-adminpassword}
      MONGO_INITDB_DATABASE: team-planner
    volumes:
      - mongodb_data:/data/db
      - ./backend/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - team-planner-network

  # Redis Cache (Optional - for session management)
  redis:
    image: redis:7-alpine
    container_name: team-planner-redis
    restart: unless-stopped
    ports:
      - "0.0.0.0:6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - team-planner-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: team-planner-backend
    restart: unless-stopped
    ports:
      - "0.0.0.0:5000:5000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-adminpassword}@mongodb:27017/team-planner?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_EXPIRE: ${JWT_EXPIRE:-30d}
      REDIS_URL: redis://redis:6379
      FRONTEND_URL: http://10.212.243.37:3000
      ALLOWED_ORIGINS: "http://localhost:3000,http://127.0.0.1:3000,http://10.212.243.37:3000,http://10.212.243.37"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
      - uploads:/app/uploads
    networks:
      - team-planner-network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://10.212.243.37:5000/api
    container_name: team-planner-frontend
    restart: unless-stopped
    ports:
      - "0.0.0.0:3000:80"
    depends_on:
      - backend
    networks:
      - team-planner-network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: team-planner-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - frontend
      - backend
    networks:
      - team-planner-network
    profiles:
      - production

  # Certbot for SSL (Production)
  certbot:
    image: certbot/certbot
    container_name: team-planner-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    profiles:
      - production

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local

networks:
  team-planner-network:
    driver: bridge
